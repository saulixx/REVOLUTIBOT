/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ReferralUseService } from "../referralUse.service";
import { ReferralUseCreateInput } from "./ReferralUseCreateInput";
import { ReferralUse } from "./ReferralUse";
import { ReferralUseFindManyArgs } from "./ReferralUseFindManyArgs";
import { ReferralUseWhereUniqueInput } from "./ReferralUseWhereUniqueInput";
import { ReferralUseUpdateInput } from "./ReferralUseUpdateInput";

export class ReferralUseControllerBase {
  constructor(protected readonly service: ReferralUseService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ReferralUse })
  async createReferralUse(
    @common.Body() data: ReferralUseCreateInput
  ): Promise<ReferralUse> {
    return await this.service.createReferralUse({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ReferralUse] })
  @ApiNestedQuery(ReferralUseFindManyArgs)
  async referralUses(@common.Req() request: Request): Promise<ReferralUse[]> {
    const args = plainToClass(ReferralUseFindManyArgs, request.query);
    return this.service.referralUses({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ReferralUse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async referralUse(
    @common.Param() params: ReferralUseWhereUniqueInput
  ): Promise<ReferralUse | null> {
    const result = await this.service.referralUse({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ReferralUse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateReferralUse(
    @common.Param() params: ReferralUseWhereUniqueInput,
    @common.Body() data: ReferralUseUpdateInput
  ): Promise<ReferralUse | null> {
    try {
      return await this.service.updateReferralUse({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ReferralUse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteReferralUse(
    @common.Param() params: ReferralUseWhereUniqueInput
  ): Promise<ReferralUse | null> {
    try {
      return await this.service.deleteReferralUse({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
