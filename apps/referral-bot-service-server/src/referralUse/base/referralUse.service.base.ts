/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ReferralUse as PrismaReferralUse } from "@prisma/client";

export class ReferralUseServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ReferralUseCountArgs, "select">
  ): Promise<number> {
    return this.prisma.referralUse.count(args);
  }

  async referralUses(
    args: Prisma.ReferralUseFindManyArgs
  ): Promise<PrismaReferralUse[]> {
    return this.prisma.referralUse.findMany(args);
  }
  async referralUse(
    args: Prisma.ReferralUseFindUniqueArgs
  ): Promise<PrismaReferralUse | null> {
    return this.prisma.referralUse.findUnique(args);
  }
  async createReferralUse(
    args: Prisma.ReferralUseCreateArgs
  ): Promise<PrismaReferralUse> {
    return this.prisma.referralUse.create(args);
  }
  async updateReferralUse(
    args: Prisma.ReferralUseUpdateArgs
  ): Promise<PrismaReferralUse> {
    return this.prisma.referralUse.update(args);
  }
  async deleteReferralUse(
    args: Prisma.ReferralUseDeleteArgs
  ): Promise<PrismaReferralUse> {
    return this.prisma.referralUse.delete(args);
  }
}
