/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, AdminMessage as PrismaAdminMessage } from "@prisma/client";

export class AdminMessageServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AdminMessageCountArgs, "select">
  ): Promise<number> {
    return this.prisma.adminMessage.count(args);
  }

  async adminMessages(
    args: Prisma.AdminMessageFindManyArgs
  ): Promise<PrismaAdminMessage[]> {
    return this.prisma.adminMessage.findMany(args);
  }
  async adminMessage(
    args: Prisma.AdminMessageFindUniqueArgs
  ): Promise<PrismaAdminMessage | null> {
    return this.prisma.adminMessage.findUnique(args);
  }
  async createAdminMessage(
    args: Prisma.AdminMessageCreateArgs
  ): Promise<PrismaAdminMessage> {
    return this.prisma.adminMessage.create(args);
  }
  async updateAdminMessage(
    args: Prisma.AdminMessageUpdateArgs
  ): Promise<PrismaAdminMessage> {
    return this.prisma.adminMessage.update(args);
  }
  async deleteAdminMessage(
    args: Prisma.AdminMessageDeleteArgs
  ): Promise<PrismaAdminMessage> {
    return this.prisma.adminMessage.delete(args);
  }
}
