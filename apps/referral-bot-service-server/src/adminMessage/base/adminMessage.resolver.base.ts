/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AdminMessage } from "./AdminMessage";
import { AdminMessageCountArgs } from "./AdminMessageCountArgs";
import { AdminMessageFindManyArgs } from "./AdminMessageFindManyArgs";
import { AdminMessageFindUniqueArgs } from "./AdminMessageFindUniqueArgs";
import { CreateAdminMessageArgs } from "./CreateAdminMessageArgs";
import { UpdateAdminMessageArgs } from "./UpdateAdminMessageArgs";
import { DeleteAdminMessageArgs } from "./DeleteAdminMessageArgs";
import { AdminMessageService } from "../adminMessage.service";
@graphql.Resolver(() => AdminMessage)
export class AdminMessageResolverBase {
  constructor(protected readonly service: AdminMessageService) {}

  async _adminMessagesMeta(
    @graphql.Args() args: AdminMessageCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AdminMessage])
  async adminMessages(
    @graphql.Args() args: AdminMessageFindManyArgs
  ): Promise<AdminMessage[]> {
    return this.service.adminMessages(args);
  }

  @graphql.Query(() => AdminMessage, { nullable: true })
  async adminMessage(
    @graphql.Args() args: AdminMessageFindUniqueArgs
  ): Promise<AdminMessage | null> {
    const result = await this.service.adminMessage(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AdminMessage)
  async createAdminMessage(
    @graphql.Args() args: CreateAdminMessageArgs
  ): Promise<AdminMessage> {
    return await this.service.createAdminMessage({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => AdminMessage)
  async updateAdminMessage(
    @graphql.Args() args: UpdateAdminMessageArgs
  ): Promise<AdminMessage | null> {
    try {
      return await this.service.updateAdminMessage({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AdminMessage)
  async deleteAdminMessage(
    @graphql.Args() args: DeleteAdminMessageArgs
  ): Promise<AdminMessage | null> {
    try {
      return await this.service.deleteAdminMessage(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
