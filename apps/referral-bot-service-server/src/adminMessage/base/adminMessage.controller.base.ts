/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AdminMessageService } from "../adminMessage.service";
import { AdminMessageCreateInput } from "./AdminMessageCreateInput";
import { AdminMessage } from "./AdminMessage";
import { AdminMessageFindManyArgs } from "./AdminMessageFindManyArgs";
import { AdminMessageWhereUniqueInput } from "./AdminMessageWhereUniqueInput";
import { AdminMessageUpdateInput } from "./AdminMessageUpdateInput";

export class AdminMessageControllerBase {
  constructor(protected readonly service: AdminMessageService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AdminMessage })
  async createAdminMessage(
    @common.Body() data: AdminMessageCreateInput
  ): Promise<AdminMessage> {
    return await this.service.createAdminMessage({
      data: data,
      select: {
        content: true,
        createdAt: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AdminMessage] })
  @ApiNestedQuery(AdminMessageFindManyArgs)
  async adminMessages(@common.Req() request: Request): Promise<AdminMessage[]> {
    const args = plainToClass(AdminMessageFindManyArgs, request.query);
    return this.service.adminMessages({
      ...args,
      select: {
        content: true,
        createdAt: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AdminMessage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async adminMessage(
    @common.Param() params: AdminMessageWhereUniqueInput
  ): Promise<AdminMessage | null> {
    const result = await this.service.adminMessage({
      where: params,
      select: {
        content: true,
        createdAt: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AdminMessage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAdminMessage(
    @common.Param() params: AdminMessageWhereUniqueInput,
    @common.Body() data: AdminMessageUpdateInput
  ): Promise<AdminMessage | null> {
    try {
      return await this.service.updateAdminMessage({
        where: params,
        data: data,
        select: {
          content: true,
          createdAt: true,
          id: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AdminMessage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAdminMessage(
    @common.Param() params: AdminMessageWhereUniqueInput
  ): Promise<AdminMessage | null> {
    try {
      return await this.service.deleteAdminMessage({
        where: params,
        select: {
          content: true,
          createdAt: true,
          id: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
