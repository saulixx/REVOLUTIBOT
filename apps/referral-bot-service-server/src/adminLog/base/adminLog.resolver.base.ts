/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AdminLog } from "./AdminLog";
import { AdminLogCountArgs } from "./AdminLogCountArgs";
import { AdminLogFindManyArgs } from "./AdminLogFindManyArgs";
import { AdminLogFindUniqueArgs } from "./AdminLogFindUniqueArgs";
import { CreateAdminLogArgs } from "./CreateAdminLogArgs";
import { UpdateAdminLogArgs } from "./UpdateAdminLogArgs";
import { DeleteAdminLogArgs } from "./DeleteAdminLogArgs";
import { AdminLogService } from "../adminLog.service";
@graphql.Resolver(() => AdminLog)
export class AdminLogResolverBase {
  constructor(protected readonly service: AdminLogService) {}

  async _adminLogsMeta(
    @graphql.Args() args: AdminLogCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AdminLog])
  async adminLogs(
    @graphql.Args() args: AdminLogFindManyArgs
  ): Promise<AdminLog[]> {
    return this.service.adminLogs(args);
  }

  @graphql.Query(() => AdminLog, { nullable: true })
  async adminLog(
    @graphql.Args() args: AdminLogFindUniqueArgs
  ): Promise<AdminLog | null> {
    const result = await this.service.adminLog(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AdminLog)
  async createAdminLog(
    @graphql.Args() args: CreateAdminLogArgs
  ): Promise<AdminLog> {
    return await this.service.createAdminLog({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => AdminLog)
  async updateAdminLog(
    @graphql.Args() args: UpdateAdminLogArgs
  ): Promise<AdminLog | null> {
    try {
      return await this.service.updateAdminLog({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AdminLog)
  async deleteAdminLog(
    @graphql.Args() args: DeleteAdminLogArgs
  ): Promise<AdminLog | null> {
    try {
      return await this.service.deleteAdminLog(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
