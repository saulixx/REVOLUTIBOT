/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AdminLogService } from "../adminLog.service";
import { AdminLogCreateInput } from "./AdminLogCreateInput";
import { AdminLog } from "./AdminLog";
import { AdminLogFindManyArgs } from "./AdminLogFindManyArgs";
import { AdminLogWhereUniqueInput } from "./AdminLogWhereUniqueInput";
import { AdminLogUpdateInput } from "./AdminLogUpdateInput";

export class AdminLogControllerBase {
  constructor(protected readonly service: AdminLogService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AdminLog })
  async createAdminLog(
    @common.Body() data: AdminLogCreateInput
  ): Promise<AdminLog> {
    return await this.service.createAdminLog({
      data: data,
      select: {
        action: true,
        createdAt: true,
        details: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AdminLog] })
  @ApiNestedQuery(AdminLogFindManyArgs)
  async adminLogs(@common.Req() request: Request): Promise<AdminLog[]> {
    const args = plainToClass(AdminLogFindManyArgs, request.query);
    return this.service.adminLogs({
      ...args,
      select: {
        action: true,
        createdAt: true,
        details: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AdminLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async adminLog(
    @common.Param() params: AdminLogWhereUniqueInput
  ): Promise<AdminLog | null> {
    const result = await this.service.adminLog({
      where: params,
      select: {
        action: true,
        createdAt: true,
        details: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AdminLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAdminLog(
    @common.Param() params: AdminLogWhereUniqueInput,
    @common.Body() data: AdminLogUpdateInput
  ): Promise<AdminLog | null> {
    try {
      return await this.service.updateAdminLog({
        where: params,
        data: data,
        select: {
          action: true,
          createdAt: true,
          details: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AdminLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAdminLog(
    @common.Param() params: AdminLogWhereUniqueInput
  ): Promise<AdminLog | null> {
    try {
      return await this.service.deleteAdminLog({
        where: params,
        select: {
          action: true,
          createdAt: true,
          details: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
