/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, CardRequest as PrismaCardRequest } from "@prisma/client";

export class CardRequestServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CardRequestCountArgs, "select">
  ): Promise<number> {
    return this.prisma.cardRequest.count(args);
  }

  async cardRequests(
    args: Prisma.CardRequestFindManyArgs
  ): Promise<PrismaCardRequest[]> {
    return this.prisma.cardRequest.findMany(args);
  }
  async cardRequest(
    args: Prisma.CardRequestFindUniqueArgs
  ): Promise<PrismaCardRequest | null> {
    return this.prisma.cardRequest.findUnique(args);
  }
  async createCardRequest(
    args: Prisma.CardRequestCreateArgs
  ): Promise<PrismaCardRequest> {
    return this.prisma.cardRequest.create(args);
  }
  async updateCardRequest(
    args: Prisma.CardRequestUpdateArgs
  ): Promise<PrismaCardRequest> {
    return this.prisma.cardRequest.update(args);
  }
  async deleteCardRequest(
    args: Prisma.CardRequestDeleteArgs
  ): Promise<PrismaCardRequest> {
    return this.prisma.cardRequest.delete(args);
  }
}
