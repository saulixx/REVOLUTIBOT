/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CardRequest } from "./CardRequest";
import { CardRequestCountArgs } from "./CardRequestCountArgs";
import { CardRequestFindManyArgs } from "./CardRequestFindManyArgs";
import { CardRequestFindUniqueArgs } from "./CardRequestFindUniqueArgs";
import { CreateCardRequestArgs } from "./CreateCardRequestArgs";
import { UpdateCardRequestArgs } from "./UpdateCardRequestArgs";
import { DeleteCardRequestArgs } from "./DeleteCardRequestArgs";
import { CardRequestService } from "../cardRequest.service";
@graphql.Resolver(() => CardRequest)
export class CardRequestResolverBase {
  constructor(protected readonly service: CardRequestService) {}

  async _cardRequestsMeta(
    @graphql.Args() args: CardRequestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CardRequest])
  async cardRequests(
    @graphql.Args() args: CardRequestFindManyArgs
  ): Promise<CardRequest[]> {
    return this.service.cardRequests(args);
  }

  @graphql.Query(() => CardRequest, { nullable: true })
  async cardRequest(
    @graphql.Args() args: CardRequestFindUniqueArgs
  ): Promise<CardRequest | null> {
    const result = await this.service.cardRequest(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CardRequest)
  async createCardRequest(
    @graphql.Args() args: CreateCardRequestArgs
  ): Promise<CardRequest> {
    return await this.service.createCardRequest({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CardRequest)
  async updateCardRequest(
    @graphql.Args() args: UpdateCardRequestArgs
  ): Promise<CardRequest | null> {
    try {
      return await this.service.updateCardRequest({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CardRequest)
  async deleteCardRequest(
    @graphql.Args() args: DeleteCardRequestArgs
  ): Promise<CardRequest | null> {
    try {
      return await this.service.deleteCardRequest(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
