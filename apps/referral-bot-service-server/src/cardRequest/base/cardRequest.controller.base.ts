/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CardRequestService } from "../cardRequest.service";
import { CardRequestCreateInput } from "./CardRequestCreateInput";
import { CardRequest } from "./CardRequest";
import { CardRequestFindManyArgs } from "./CardRequestFindManyArgs";
import { CardRequestWhereUniqueInput } from "./CardRequestWhereUniqueInput";
import { CardRequestUpdateInput } from "./CardRequestUpdateInput";

export class CardRequestControllerBase {
  constructor(protected readonly service: CardRequestService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CardRequest })
  async createCardRequest(
    @common.Body() data: CardRequestCreateInput
  ): Promise<CardRequest> {
    return await this.service.createCardRequest({
      data: data,
      select: {
        createdAt: true,
        id: true,
        status: true,
        updatedAt: true,
        userId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CardRequest] })
  @ApiNestedQuery(CardRequestFindManyArgs)
  async cardRequests(@common.Req() request: Request): Promise<CardRequest[]> {
    const args = plainToClass(CardRequestFindManyArgs, request.query);
    return this.service.cardRequests({
      ...args,
      select: {
        createdAt: true,
        id: true,
        status: true,
        updatedAt: true,
        userId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CardRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async cardRequest(
    @common.Param() params: CardRequestWhereUniqueInput
  ): Promise<CardRequest | null> {
    const result = await this.service.cardRequest({
      where: params,
      select: {
        createdAt: true,
        id: true,
        status: true,
        updatedAt: true,
        userId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CardRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCardRequest(
    @common.Param() params: CardRequestWhereUniqueInput,
    @common.Body() data: CardRequestUpdateInput
  ): Promise<CardRequest | null> {
    try {
      return await this.service.updateCardRequest({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          status: true,
          updatedAt: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CardRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCardRequest(
    @common.Param() params: CardRequestWhereUniqueInput
  ): Promise<CardRequest | null> {
    try {
      return await this.service.deleteCardRequest({
        where: params,
        select: {
          createdAt: true,
          id: true,
          status: true,
          updatedAt: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
