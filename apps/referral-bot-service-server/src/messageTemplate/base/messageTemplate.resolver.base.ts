/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MessageTemplate } from "./MessageTemplate";
import { MessageTemplateCountArgs } from "./MessageTemplateCountArgs";
import { MessageTemplateFindManyArgs } from "./MessageTemplateFindManyArgs";
import { MessageTemplateFindUniqueArgs } from "./MessageTemplateFindUniqueArgs";
import { DeleteMessageTemplateArgs } from "./DeleteMessageTemplateArgs";
import { MessageTemplateService } from "../messageTemplate.service";
@graphql.Resolver(() => MessageTemplate)
export class MessageTemplateResolverBase {
  constructor(protected readonly service: MessageTemplateService) {}

  async _messageTemplatesMeta(
    @graphql.Args() args: MessageTemplateCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MessageTemplate])
  async messageTemplates(
    @graphql.Args() args: MessageTemplateFindManyArgs
  ): Promise<MessageTemplate[]> {
    return this.service.messageTemplates(args);
  }

  @graphql.Query(() => MessageTemplate, { nullable: true })
  async messageTemplate(
    @graphql.Args() args: MessageTemplateFindUniqueArgs
  ): Promise<MessageTemplate | null> {
    const result = await this.service.messageTemplate(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MessageTemplate)
  async deleteMessageTemplate(
    @graphql.Args() args: DeleteMessageTemplateArgs
  ): Promise<MessageTemplate | null> {
    try {
      return await this.service.deleteMessageTemplate(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
