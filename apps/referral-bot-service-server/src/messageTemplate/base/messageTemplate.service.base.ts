/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  MessageTemplate as PrismaMessageTemplate,
} from "@prisma/client";

export class MessageTemplateServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MessageTemplateCountArgs, "select">
  ): Promise<number> {
    return this.prisma.messageTemplate.count(args);
  }

  async messageTemplates(
    args: Prisma.MessageTemplateFindManyArgs
  ): Promise<PrismaMessageTemplate[]> {
    return this.prisma.messageTemplate.findMany(args);
  }
  async messageTemplate(
    args: Prisma.MessageTemplateFindUniqueArgs
  ): Promise<PrismaMessageTemplate | null> {
    return this.prisma.messageTemplate.findUnique(args);
  }
  async createMessageTemplate(
    args: Prisma.MessageTemplateCreateArgs
  ): Promise<PrismaMessageTemplate> {
    return this.prisma.messageTemplate.create(args);
  }
  async updateMessageTemplate(
    args: Prisma.MessageTemplateUpdateArgs
  ): Promise<PrismaMessageTemplate> {
    return this.prisma.messageTemplate.update(args);
  }
  async deleteMessageTemplate(
    args: Prisma.MessageTemplateDeleteArgs
  ): Promise<PrismaMessageTemplate> {
    return this.prisma.messageTemplate.delete(args);
  }
}
