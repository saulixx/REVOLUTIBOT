/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MessageTemplateService } from "../messageTemplate.service";
import { MessageTemplateCreateInput } from "./MessageTemplateCreateInput";
import { MessageTemplate } from "./MessageTemplate";
import { MessageTemplateFindManyArgs } from "./MessageTemplateFindManyArgs";
import { MessageTemplateWhereUniqueInput } from "./MessageTemplateWhereUniqueInput";
import { MessageTemplateUpdateInput } from "./MessageTemplateUpdateInput";

export class MessageTemplateControllerBase {
  constructor(protected readonly service: MessageTemplateService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MessageTemplate })
  async createMessageTemplate(
    @common.Body() data: MessageTemplateCreateInput
  ): Promise<MessageTemplate> {
    return await this.service.createMessageTemplate({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MessageTemplate] })
  @ApiNestedQuery(MessageTemplateFindManyArgs)
  async messageTemplates(
    @common.Req() request: Request
  ): Promise<MessageTemplate[]> {
    const args = plainToClass(MessageTemplateFindManyArgs, request.query);
    return this.service.messageTemplates({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MessageTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async messageTemplate(
    @common.Param() params: MessageTemplateWhereUniqueInput
  ): Promise<MessageTemplate | null> {
    const result = await this.service.messageTemplate({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MessageTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMessageTemplate(
    @common.Param() params: MessageTemplateWhereUniqueInput,
    @common.Body() data: MessageTemplateUpdateInput
  ): Promise<MessageTemplate | null> {
    try {
      return await this.service.updateMessageTemplate({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MessageTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMessageTemplate(
    @common.Param() params: MessageTemplateWhereUniqueInput
  ): Promise<MessageTemplate | null> {
    try {
      return await this.service.deleteMessageTemplate({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
