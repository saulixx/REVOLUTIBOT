/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserReferralService } from "../userReferral.service";
import { UserReferralCreateInput } from "./UserReferralCreateInput";
import { UserReferral } from "./UserReferral";
import { UserReferralFindManyArgs } from "./UserReferralFindManyArgs";
import { UserReferralWhereUniqueInput } from "./UserReferralWhereUniqueInput";
import { UserReferralUpdateInput } from "./UserReferralUpdateInput";

export class UserReferralControllerBase {
  constructor(protected readonly service: UserReferralService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserReferral })
  async createUserReferral(
    @common.Body() data: UserReferralCreateInput
  ): Promise<UserReferral> {
    return await this.service.createUserReferral({
      data: data,
      select: {
        createdAt: true,
        id: true,
        referralUser: true,
        referredUser: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UserReferral] })
  @ApiNestedQuery(UserReferralFindManyArgs)
  async userReferrals(@common.Req() request: Request): Promise<UserReferral[]> {
    const args = plainToClass(UserReferralFindManyArgs, request.query);
    return this.service.userReferrals({
      ...args,
      select: {
        createdAt: true,
        id: true,
        referralUser: true,
        referredUser: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserReferral })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async userReferral(
    @common.Param() params: UserReferralWhereUniqueInput
  ): Promise<UserReferral | null> {
    const result = await this.service.userReferral({
      where: params,
      select: {
        createdAt: true,
        id: true,
        referralUser: true,
        referredUser: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserReferral })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUserReferral(
    @common.Param() params: UserReferralWhereUniqueInput,
    @common.Body() data: UserReferralUpdateInput
  ): Promise<UserReferral | null> {
    try {
      return await this.service.updateUserReferral({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          referralUser: true,
          referredUser: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserReferral })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUserReferral(
    @common.Param() params: UserReferralWhereUniqueInput
  ): Promise<UserReferral | null> {
    try {
      return await this.service.deleteUserReferral({
        where: params,
        select: {
          createdAt: true,
          id: true,
          referralUser: true,
          referredUser: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
