/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { UserReferral } from "./UserReferral";
import { UserReferralCountArgs } from "./UserReferralCountArgs";
import { UserReferralFindManyArgs } from "./UserReferralFindManyArgs";
import { UserReferralFindUniqueArgs } from "./UserReferralFindUniqueArgs";
import { CreateUserReferralArgs } from "./CreateUserReferralArgs";
import { UpdateUserReferralArgs } from "./UpdateUserReferralArgs";
import { DeleteUserReferralArgs } from "./DeleteUserReferralArgs";
import { UserReferralService } from "../userReferral.service";
@graphql.Resolver(() => UserReferral)
export class UserReferralResolverBase {
  constructor(protected readonly service: UserReferralService) {}

  async _userReferralsMeta(
    @graphql.Args() args: UserReferralCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UserReferral])
  async userReferrals(
    @graphql.Args() args: UserReferralFindManyArgs
  ): Promise<UserReferral[]> {
    return this.service.userReferrals(args);
  }

  @graphql.Query(() => UserReferral, { nullable: true })
  async userReferral(
    @graphql.Args() args: UserReferralFindUniqueArgs
  ): Promise<UserReferral | null> {
    const result = await this.service.userReferral(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UserReferral)
  async createUserReferral(
    @graphql.Args() args: CreateUserReferralArgs
  ): Promise<UserReferral> {
    return await this.service.createUserReferral({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => UserReferral)
  async updateUserReferral(
    @graphql.Args() args: UpdateUserReferralArgs
  ): Promise<UserReferral | null> {
    try {
      return await this.service.updateUserReferral({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserReferral)
  async deleteUserReferral(
    @graphql.Args() args: DeleteUserReferralArgs
  ): Promise<UserReferral | null> {
    try {
      return await this.service.deleteUserReferral(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
