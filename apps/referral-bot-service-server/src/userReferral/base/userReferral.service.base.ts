/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, UserReferral as PrismaUserReferral } from "@prisma/client";

export class UserReferralServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UserReferralCountArgs, "select">
  ): Promise<number> {
    return this.prisma.userReferral.count(args);
  }

  async userReferrals(
    args: Prisma.UserReferralFindManyArgs
  ): Promise<PrismaUserReferral[]> {
    return this.prisma.userReferral.findMany(args);
  }
  async userReferral(
    args: Prisma.UserReferralFindUniqueArgs
  ): Promise<PrismaUserReferral | null> {
    return this.prisma.userReferral.findUnique(args);
  }
  async createUserReferral(
    args: Prisma.UserReferralCreateArgs
  ): Promise<PrismaUserReferral> {
    return this.prisma.userReferral.create(args);
  }
  async updateUserReferral(
    args: Prisma.UserReferralUpdateArgs
  ): Promise<PrismaUserReferral> {
    return this.prisma.userReferral.update(args);
  }
  async deleteUserReferral(
    args: Prisma.UserReferralDeleteArgs
  ): Promise<PrismaUserReferral> {
    return this.prisma.userReferral.delete(args);
  }
}
