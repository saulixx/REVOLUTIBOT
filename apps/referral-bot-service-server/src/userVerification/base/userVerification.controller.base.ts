/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserVerificationService } from "../userVerification.service";
import { UserVerificationCreateInput } from "./UserVerificationCreateInput";
import { UserVerification } from "./UserVerification";
import { UserVerificationFindManyArgs } from "./UserVerificationFindManyArgs";
import { UserVerificationWhereUniqueInput } from "./UserVerificationWhereUniqueInput";
import { UserVerificationUpdateInput } from "./UserVerificationUpdateInput";

export class UserVerificationControllerBase {
  constructor(protected readonly service: UserVerificationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserVerification })
  async createUserVerification(
    @common.Body() data: UserVerificationCreateInput
  ): Promise<UserVerification> {
    return await this.service.createUserVerification({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UserVerification] })
  @ApiNestedQuery(UserVerificationFindManyArgs)
  async userVerifications(
    @common.Req() request: Request
  ): Promise<UserVerification[]> {
    const args = plainToClass(UserVerificationFindManyArgs, request.query);
    return this.service.userVerifications({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserVerification })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async userVerification(
    @common.Param() params: UserVerificationWhereUniqueInput
  ): Promise<UserVerification | null> {
    const result = await this.service.userVerification({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserVerification })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUserVerification(
    @common.Param() params: UserVerificationWhereUniqueInput,
    @common.Body() data: UserVerificationUpdateInput
  ): Promise<UserVerification | null> {
    try {
      return await this.service.updateUserVerification({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserVerification })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUserVerification(
    @common.Param() params: UserVerificationWhereUniqueInput
  ): Promise<UserVerification | null> {
    try {
      return await this.service.deleteUserVerification({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
