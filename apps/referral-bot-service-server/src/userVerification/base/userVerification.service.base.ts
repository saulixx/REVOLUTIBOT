/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  UserVerification as PrismaUserVerification,
} from "@prisma/client";

export class UserVerificationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UserVerificationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.userVerification.count(args);
  }

  async userVerifications(
    args: Prisma.UserVerificationFindManyArgs
  ): Promise<PrismaUserVerification[]> {
    return this.prisma.userVerification.findMany(args);
  }
  async userVerification(
    args: Prisma.UserVerificationFindUniqueArgs
  ): Promise<PrismaUserVerification | null> {
    return this.prisma.userVerification.findUnique(args);
  }
  async createUserVerification(
    args: Prisma.UserVerificationCreateArgs
  ): Promise<PrismaUserVerification> {
    return this.prisma.userVerification.create(args);
  }
  async updateUserVerification(
    args: Prisma.UserVerificationUpdateArgs
  ): Promise<PrismaUserVerification> {
    return this.prisma.userVerification.update(args);
  }
  async deleteUserVerification(
    args: Prisma.UserVerificationDeleteArgs
  ): Promise<PrismaUserVerification> {
    return this.prisma.userVerification.delete(args);
  }
}
