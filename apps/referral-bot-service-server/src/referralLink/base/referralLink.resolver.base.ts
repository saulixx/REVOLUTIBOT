/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ReferralLink } from "./ReferralLink";
import { ReferralLinkCountArgs } from "./ReferralLinkCountArgs";
import { ReferralLinkFindManyArgs } from "./ReferralLinkFindManyArgs";
import { ReferralLinkFindUniqueArgs } from "./ReferralLinkFindUniqueArgs";
import { CreateReferralLinkArgs } from "./CreateReferralLinkArgs";
import { UpdateReferralLinkArgs } from "./UpdateReferralLinkArgs";
import { DeleteReferralLinkArgs } from "./DeleteReferralLinkArgs";
import { ReferralLinkService } from "../referralLink.service";
@graphql.Resolver(() => ReferralLink)
export class ReferralLinkResolverBase {
  constructor(protected readonly service: ReferralLinkService) {}

  async _referralLinksMeta(
    @graphql.Args() args: ReferralLinkCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ReferralLink])
  async referralLinks(
    @graphql.Args() args: ReferralLinkFindManyArgs
  ): Promise<ReferralLink[]> {
    return this.service.referralLinks(args);
  }

  @graphql.Query(() => ReferralLink, { nullable: true })
  async referralLink(
    @graphql.Args() args: ReferralLinkFindUniqueArgs
  ): Promise<ReferralLink | null> {
    const result = await this.service.referralLink(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ReferralLink)
  async createReferralLink(
    @graphql.Args() args: CreateReferralLinkArgs
  ): Promise<ReferralLink> {
    return await this.service.createReferralLink({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ReferralLink)
  async updateReferralLink(
    @graphql.Args() args: UpdateReferralLinkArgs
  ): Promise<ReferralLink | null> {
    try {
      return await this.service.updateReferralLink({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ReferralLink)
  async deleteReferralLink(
    @graphql.Args() args: DeleteReferralLinkArgs
  ): Promise<ReferralLink | null> {
    try {
      return await this.service.deleteReferralLink(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
