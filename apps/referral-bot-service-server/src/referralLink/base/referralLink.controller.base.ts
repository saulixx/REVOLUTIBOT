/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ReferralLinkService } from "../referralLink.service";
import { ReferralLinkCreateInput } from "./ReferralLinkCreateInput";
import { ReferralLink } from "./ReferralLink";
import { ReferralLinkFindManyArgs } from "./ReferralLinkFindManyArgs";
import { ReferralLinkWhereUniqueInput } from "./ReferralLinkWhereUniqueInput";
import { ReferralLinkUpdateInput } from "./ReferralLinkUpdateInput";

export class ReferralLinkControllerBase {
  constructor(protected readonly service: ReferralLinkService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ReferralLink })
  async createReferralLink(
    @common.Body() data: ReferralLinkCreateInput
  ): Promise<ReferralLink> {
    return await this.service.createReferralLink({
      data: data,
      select: {
        createdAt: true,
        id: true,
        link: true,
        referralLink: true,
        referrerId: true,
        updatedAt: true,
        userId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ReferralLink] })
  @ApiNestedQuery(ReferralLinkFindManyArgs)
  async referralLinks(@common.Req() request: Request): Promise<ReferralLink[]> {
    const args = plainToClass(ReferralLinkFindManyArgs, request.query);
    return this.service.referralLinks({
      ...args,
      select: {
        createdAt: true,
        id: true,
        link: true,
        referralLink: true,
        referrerId: true,
        updatedAt: true,
        userId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ReferralLink })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async referralLink(
    @common.Param() params: ReferralLinkWhereUniqueInput
  ): Promise<ReferralLink | null> {
    const result = await this.service.referralLink({
      where: params,
      select: {
        createdAt: true,
        id: true,
        link: true,
        referralLink: true,
        referrerId: true,
        updatedAt: true,
        userId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ReferralLink })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateReferralLink(
    @common.Param() params: ReferralLinkWhereUniqueInput,
    @common.Body() data: ReferralLinkUpdateInput
  ): Promise<ReferralLink | null> {
    try {
      return await this.service.updateReferralLink({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          link: true,
          referralLink: true,
          referrerId: true,
          updatedAt: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ReferralLink })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteReferralLink(
    @common.Param() params: ReferralLinkWhereUniqueInput
  ): Promise<ReferralLink | null> {
    try {
      return await this.service.deleteReferralLink({
        where: params,
        select: {
          createdAt: true,
          id: true,
          link: true,
          referralLink: true,
          referrerId: true,
          updatedAt: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
